#
# This file details the comments that are applicable to each of the file types
# is in the format of <file extension>.comment.(single|multi).[start|end]
#
# This file also provides a list of supposed binary file extensions which works
# in conjunction with the ignoreBinary flag on the task.  If set, the binary 
# file extensions listed below will be ignored.
#

# binary file list comma separated - all file extensions are lower-cased first
# then checked against this list.
binary.file.extension=jpg,jpeg,gif,jar,class,png,bmp,pdf,\
					war,ttf,tif,tiff,swf,zip,gz,tgz,ico,doc,ppt,xls,\
					odt,psd,tar,zip,exe,com,dll,ser

# normal java commenting
java.comment.single=//
java.comment.multi.start=/*
java.comment.multi.end=*/

# normal gradle commenting
gradle.comment.single=//
gradle.comment.multi.start=/*
gradle.comment.multi.end=*/

# these are actually particular to MySQL
sql.comment.single=--
sql.comment.multi.start=/*
sql.comment.multi.end=*/

# properties files do not have a multi line comment format 
properties.comment.single=#

# xml doesn't have a different single line comment
xml.comment.multi.start=<!--
xml.comment.multi.end=-->

# xsl doesn't have a different single line comment
xsl.comment.multi.start=<!--
xsl.comment.multi.end=-->

#xslt - same as xsl
xslt.comment.multi.start=<!--
xslt.comment.multi.end=-->

#xsd - same as xsl
xsd.comment.multi.start=<!--
xsd.comment.multi.end=-->

#xsd - same as xsl
tld.comment.multi.start=<!--
tld.comment.multi.end=-->

# python - no multi line
py.comment.single=#

# shell - no multi line
sh.comment.single=#

# html - xml type
html.comment.multi.start=<!--
html.comment.multi.end=-->

# htm - xml type
htm.comment.multi.start=<!--
htm.comment.multi.end=-->

# javascript - xml type
js.comment.multi.start=<!--
js.comment.multi.end=-->
js.comment.single=//

# jsp - like java
jsp.comment.single=//
jsp.comment.multi.start=/*
jsp.comment.multi.end=*/

# css - multi line only
css.comment.multi.start=/*
css.comment.multi.end=*/
